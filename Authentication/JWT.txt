JSON Web Token (JWT) is an open standard that defines
a compact and self-contained way for securely transmitting information between parties as a JSON object.
This information can be verified and trusted because it is digitally signed.
Signed tokens: though protected against tampering,
is readable by anyone. Do not put secret information in the payload or header elements of a JWT unless it is encrypted.

When should you use JSON Web Tokens?
Authorization:
This is the most common scenario for using JWT.
Once the user is logged in, each subsequent request will include the JWT,
allowing the user to access routes, services, and resources that are permitted with that token.
Information Exchange:
JSON Web Tokens are a good way of securely transmitting information between parties.
Because JWTs can be signed—for example,
using public/private key pairs—you can be sure the senders are who they say they are.
Additionally, as the signature is calculated using the header and the payload,
you can also verify that the content hasn't been tampered with.

JWT Structure:
Header.Payload.Signature

Header:
The header typically consists of two parts:
the type of the token, which is JWT, and the signing algorithm being used.
{
  "alg": "HS256",
  "typ": "JWT"
}

Payload:
which contains the claims.
Claims are statements about an entity (typically, the user) and additional data.
There are three types of claims: registered, public, and private claims.
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}

Signature:
To create the signature part you have to take the encoded header,
the encoded payload, a secret, the algorithm specified in the header, and sign that.

***
JWT is a user's identifier:
When a user logs in, We generate JWT and give it to the client.
And next time the client wants to call one of our APIs, needs to show his JWT.